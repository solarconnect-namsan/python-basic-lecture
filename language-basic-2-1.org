* Python 기초 2-1: 활용하기

#+BEGIN_SRC ipython :session :exports none
%matplotlib inline
#+END_SRC

어제 배운 것들을 다시 한번 되돌아봅시다.

어제 배운 것들을 정리해보면, 아래와 같은 구문들을 배웠습니다:

 - 출력문: print
 - 변수 할당
 - 반복문: for
 - 조건문: if

그리고, 아래와 같은 자료형을 배웠습니다:

 - 상수형 자료형: 참/거짓
 - 숫자형 자료형: 정수, 소수
 - 시퀀스형 자료형: 리스트, 튜플
 - 텍스트 시퀀스: 문자열
 - 바이트 시퀀스: 바이트 (bytes)
 - 컨테이너형 자료형: set, dict


어제는 전체적인 내용을 한번 훑어봤으니, 오늘은 각 요소들을 차근차근 다시 활용하면서 되돌아봅시다.


우선, 위의 내용들을 응용해서 테스트해보기 위해서, 그래프를 그리는 기본적인 코드를 소개하겠습니다.


** 기초적인 그래프 그리기

아래와 같이 가장 기본적인 그래프를 그릴 수 있습니다.

#+BEGIN_SRC ipython :session :results raw :exports both :ipyfile outputs/basic-2-1-first-plot.png
  import matplotlib.pyplot as plt
  plt.plot([1, 3, 2, 5, 4])
  plt.show()
#+END_SRC

# Out[3]:
[[file:outputs/basic-2-1-first-plot.png]]

~matplotlib~ 라는 도구는, 파이썬에서 그래프를 그릴 때 주로 사용하는 도구입니다. 

 - ~matplotlib~ 도구를 사용하겠다고 선언을 합니다.
 - 그리고는 그 도구 중에 ~plot~ 이라는 함수에 그래프를 그릴 데이터를 넣어줍니다. 
   - 그런데 ~plot~ 을 수행한다고 해서 그래프가 곧바로 화면에 보이지는 않습니다.
 - 화면에 그래프를 그리기 위해서는, ~show~ 함수를 사용해서 화면에 그리라고 명령해줘야 합니다.


이 기본적인 그래프를 활용해서 ~for~, ~if~ 등의 구문을 연습해보겠습니다.


** 변수 할당과 반복문, 그리고 리스트

변수 할당과 반복문을 사용해서, 0부터 100까지의 누적 합을 계산하는 코드를 작성해보겠습니다.

우선 의사 코드부터 작성해보겠습니다:

#+BEGIN_EXAMPLE
누적 합을 저장할 변수를 0으로 초기화한다
0부터 100까지를 순회하며
   누적 합 변수에 현재 숫자를 더한다
누적 합을 출력한다
#+END_EXAMPLE

이것을 파이썬 코드로 변환해볼까요?

#+BEGIN_SRC ipython :session :results raw output :exports both
  s = 0
  for i in range(100):
      s = s + i

  print(s)
#+END_SRC

#+RESULTS:
4950

최종 결과만 출력하지 않고, 중간 결과들을 보관해보겠습니다. 순서를 유지하면서 여러 값을 보관해야 하니, 리스트를 사용하겠습니다.


#+BEGIN_SRC ipython :session :results raw output :exports both
  s = 0
  s_list = []
  for i in range(100):
      s = s + i
      s_list.append(s)

  print(s_list)
#+END_SRC

#+RESULTS:
[0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950]


#+BEGIN_SRC ipython :session :results raw :exports both :ipyfile outputs/basic-2-1-for-1.png
  import matplotlib.pyplot as plt
  s = 0
  s_list = []
  for i in range(100):
      s = s + i
      s_list.append(s)

  plt.plot(s_list)
  plt.show()
#+END_SRC

#+RESULTS:
# Out[11]:
[[file:outputs/basic-2-1-for-1.png]]


위의 예제를 약간 변경해서, 홀수인 경우에만 그래프를 그리도록 해보겠습니다.

대부분의 프로그래밍 언어에서, 짝수/홀수를 판단하는 방법은, 2로 나누어보고, 나누어 떨어지는지, 즉 나머지가 0인지 아닌지로 판단합니다. 즉, 숫자 number에 대해서, ~number % 2 == 0~ 이면 2로 나누어 떨어지므로 짝수, 아니면 홀수입니다.

#+BEGIN_SRC ipython :session :results raw :exports both :ipyfile outputs/basic-2-1-for-2.png
  import matplotlib.pyplot as plt
  s = 0
  s_list = []
  for i in range(100):
      s = s + i
      if s % 2 == 0:
          s_list.append(None)
      else:
          s_list.append(s)

  plt.plot(s_list)
  plt.show()
#+END_SRC

#+RESULTS:
# Out[12]:
[[file:outputs/basic-2-1-for-2.png]]
